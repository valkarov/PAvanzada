//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPIproyecto.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoPrograAvanzadaEntities : DbContext
    {
        public ProyectoPrograAvanzadaEntities()
            : base("name=ProyectoPrograAvanzadaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administradores> Administradores { get; set; }
        public virtual DbSet<AsignarEmpleadosEventos> AsignarEmpleadosEventos { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<DietasAlergiasClientes> DietasAlergiasClientes { get; set; }
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<Eventos> Eventos { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Suministros> Suministros { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int InsertarEmpleado_SP(Nullable<int> cedula, string nombre, string direccion, string numero, string correo_electronico, Nullable<int> salario, string puesto, Nullable<System.DateTime> fecha_salida)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var correo_electronicoParameter = correo_electronico != null ?
                new ObjectParameter("correo_electronico", correo_electronico) :
                new ObjectParameter("correo_electronico", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("salario", salario) :
                new ObjectParameter("salario", typeof(int));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("puesto", puesto) :
                new ObjectParameter("puesto", typeof(string));
    
            var fecha_salidaParameter = fecha_salida.HasValue ?
                new ObjectParameter("fecha_salida", fecha_salida) :
                new ObjectParameter("fecha_salida", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEmpleado_SP", cedulaParameter, nombreParameter, direccionParameter, numeroParameter, correo_electronicoParameter, salarioParameter, puestoParameter, fecha_salidaParameter);
        }
    
        public virtual ObjectResult<ConsultarEmpleado_SP_Result> ConsultarEmpleado_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarEmpleado_SP_Result>("ConsultarEmpleado_SP");
        }
    }
}
